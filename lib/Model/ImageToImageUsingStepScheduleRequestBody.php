<?php
/**
 * ImageToImageUsingStepScheduleRequestBody
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Stability.ai REST API
 *
 * Welcome to the Stability.ai REST API developer preview!  Please note, this is an beta version of our new REST API.  API operations use the following versioning scheme: - `/v*alpha*`: under development and the interface is subject to change - `/v*beta*`: interface is stable, preparing for production release - `/v*` interface is stable and ready for production workloads  Your DreamStudio API key will be required for authentication: [How to find your API key](https://platform.stability.ai/docs/getting-started/authentication)  If you have feedback or encounter any issues with the API, please reach out:   - [https://github.com/Stability-AI/REST-API](https://github.com/Stability-AI/REST-API)   - [https://discord.gg/stablediffusion #API channel](https://discord.com/channels/1002292111942635562/1042896447311454361)
 *
 * The version of the OpenAPI document: v1beta
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.3.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ImageToImageUsingStepScheduleRequestBody Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ImageToImageUsingStepScheduleRequestBody implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ImageToImageUsingStepScheduleRequestBody';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'text_prompts' => '\OpenAPI\Client\Model\TextPrompt[]',
        'init_image' => '\SplFileObject',
        'init_image_mode' => '\OpenAPI\Client\Model\InitImageMode',
        'step_schedule_start' => 'float',
        'step_schedule_end' => 'float',
        'cfg_scale' => 'float',
        'clip_guidance_preset' => '\OpenAPI\Client\Model\ClipGuidancePreset',
        'height' => 'int',
        'width' => 'int',
        'sampler' => '\OpenAPI\Client\Model\Sampler',
        'samples' => 'int',
        'seed' => 'int',
        'steps' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'text_prompts' => null,
        'init_image' => 'binary',
        'init_image_mode' => null,
        'step_schedule_start' => null,
        'step_schedule_end' => null,
        'cfg_scale' => null,
        'clip_guidance_preset' => null,
        'height' => null,
        'width' => null,
        'sampler' => null,
        'samples' => null,
        'seed' => null,
        'steps' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'text_prompts' => false,
		'init_image' => false,
		'init_image_mode' => false,
		'step_schedule_start' => false,
		'step_schedule_end' => false,
		'cfg_scale' => false,
		'clip_guidance_preset' => false,
		'height' => false,
		'width' => false,
		'sampler' => false,
		'samples' => false,
		'seed' => false,
		'steps' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'text_prompts' => 'text_prompts',
        'init_image' => 'init_image',
        'init_image_mode' => 'init_image_mode',
        'step_schedule_start' => 'step_schedule_start',
        'step_schedule_end' => 'step_schedule_end',
        'cfg_scale' => 'cfg_scale',
        'clip_guidance_preset' => 'clip_guidance_preset',
        'height' => 'height',
        'width' => 'width',
        'sampler' => 'sampler',
        'samples' => 'samples',
        'seed' => 'seed',
        'steps' => 'steps'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'text_prompts' => 'setTextPrompts',
        'init_image' => 'setInitImage',
        'init_image_mode' => 'setInitImageMode',
        'step_schedule_start' => 'setStepScheduleStart',
        'step_schedule_end' => 'setStepScheduleEnd',
        'cfg_scale' => 'setCfgScale',
        'clip_guidance_preset' => 'setClipGuidancePreset',
        'height' => 'setHeight',
        'width' => 'setWidth',
        'sampler' => 'setSampler',
        'samples' => 'setSamples',
        'seed' => 'setSeed',
        'steps' => 'setSteps'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'text_prompts' => 'getTextPrompts',
        'init_image' => 'getInitImage',
        'init_image_mode' => 'getInitImageMode',
        'step_schedule_start' => 'getStepScheduleStart',
        'step_schedule_end' => 'getStepScheduleEnd',
        'cfg_scale' => 'getCfgScale',
        'clip_guidance_preset' => 'getClipGuidancePreset',
        'height' => 'getHeight',
        'width' => 'getWidth',
        'sampler' => 'getSampler',
        'samples' => 'getSamples',
        'seed' => 'getSeed',
        'steps' => 'getSteps'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('text_prompts', $data ?? [], null);
        $this->setIfExists('init_image', $data ?? [], null);
        $this->setIfExists('init_image_mode', $data ?? [], null);
        $this->setIfExists('step_schedule_start', $data ?? [], 0.65);
        $this->setIfExists('step_schedule_end', $data ?? [], null);
        $this->setIfExists('cfg_scale', $data ?? [], 7);
        $this->setIfExists('clip_guidance_preset', $data ?? [], null);
        $this->setIfExists('height', $data ?? [], 512);
        $this->setIfExists('width', $data ?? [], 512);
        $this->setIfExists('sampler', $data ?? [], null);
        $this->setIfExists('samples', $data ?? [], 1);
        $this->setIfExists('seed', $data ?? [], 0);
        $this->setIfExists('steps', $data ?? [], 50);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['text_prompts'] === null) {
            $invalidProperties[] = "'text_prompts' can't be null";
        }
        if ((count($this->container['text_prompts']) < 1)) {
            $invalidProperties[] = "invalid value for 'text_prompts', number of items must be greater than or equal to 1.";
        }

        if ($this->container['init_image'] === null) {
            $invalidProperties[] = "'init_image' can't be null";
        }
        if (!is_null($this->container['step_schedule_start']) && ($this->container['step_schedule_start'] > 1)) {
            $invalidProperties[] = "invalid value for 'step_schedule_start', must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['step_schedule_start']) && ($this->container['step_schedule_start'] < 0)) {
            $invalidProperties[] = "invalid value for 'step_schedule_start', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['step_schedule_end']) && ($this->container['step_schedule_end'] > 1)) {
            $invalidProperties[] = "invalid value for 'step_schedule_end', must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['step_schedule_end']) && ($this->container['step_schedule_end'] < 0)) {
            $invalidProperties[] = "invalid value for 'step_schedule_end', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['cfg_scale']) && ($this->container['cfg_scale'] > 35)) {
            $invalidProperties[] = "invalid value for 'cfg_scale', must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['cfg_scale']) && ($this->container['cfg_scale'] < 0)) {
            $invalidProperties[] = "invalid value for 'cfg_scale', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['height']) && ($this->container['height'] < 128)) {
            $invalidProperties[] = "invalid value for 'height', must be bigger than or equal to 128.";
        }

        if (!is_null($this->container['width']) && ($this->container['width'] < 128)) {
            $invalidProperties[] = "invalid value for 'width', must be bigger than or equal to 128.";
        }

        if (!is_null($this->container['samples']) && ($this->container['samples'] > 10)) {
            $invalidProperties[] = "invalid value for 'samples', must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['samples']) && ($this->container['samples'] < 1)) {
            $invalidProperties[] = "invalid value for 'samples', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['seed']) && ($this->container['seed'] > 4294967295)) {
            $invalidProperties[] = "invalid value for 'seed', must be smaller than or equal to 4294967295.";
        }

        if (!is_null($this->container['seed']) && ($this->container['seed'] < 0)) {
            $invalidProperties[] = "invalid value for 'seed', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['steps']) && ($this->container['steps'] > 150)) {
            $invalidProperties[] = "invalid value for 'steps', must be smaller than or equal to 150.";
        }

        if (!is_null($this->container['steps']) && ($this->container['steps'] < 10)) {
            $invalidProperties[] = "invalid value for 'steps', must be bigger than or equal to 10.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets text_prompts
     *
     * @return \OpenAPI\Client\Model\TextPrompt[]
     */
    public function getTextPrompts()
    {
        return $this->container['text_prompts'];
    }

    /**
     * Sets text_prompts
     *
     * @param \OpenAPI\Client\Model\TextPrompt[] $text_prompts An array of text prompts to use for generation.  Due to how arrays are represented in `multipart/form-data` requests, prompts must adhear to the format `text_prompts[index][text|weight]`, where `index` is some integer used to tie the text and weight together.  While `index` does not have to be sequential, duplicate entries  will override previous entries, so it is recommended to use sequential indices.  Given a text prompt with the text `A lighthouse on a cliff` and a weight of `0.5`, it would be represented as: ``` text_prompts[0][text]: \"A lighthouse on a cliff\" text_prompts[0][weight]: 0.5 ```  To add another prompt to that request simply provide the values under a new `index`:  ``` text_prompts[0][text]: \"A lighthouse on a cliff\" text_prompts[0][weight]: 0.5 text_prompts[1][text]: \"land, ground, dirt, grass\" text_prompts[1][weight]: -0.9 ```
     *
     * @return self
     */
    public function setTextPrompts($text_prompts)
    {
        if (is_null($text_prompts)) {
            throw new \InvalidArgumentException('non-nullable text_prompts cannot be null');
        }


        if ((count($text_prompts) < 1)) {
            throw new \InvalidArgumentException('invalid length for $text_prompts when calling ImageToImageUsingStepScheduleRequestBody., number of items must be greater than or equal to 1.');
        }
        $this->container['text_prompts'] = $text_prompts;

        return $this;
    }

    /**
     * Gets init_image
     *
     * @return \SplFileObject
     */
    public function getInitImage()
    {
        return $this->container['init_image'];
    }

    /**
     * Sets init_image
     *
     * @param \SplFileObject $init_image Image used to initialize the diffusion process, in lieu of random noise.
     *
     * @return self
     */
    public function setInitImage($init_image)
    {
        if (is_null($init_image)) {
            throw new \InvalidArgumentException('non-nullable init_image cannot be null');
        }
        $this->container['init_image'] = $init_image;

        return $this;
    }

    /**
     * Gets init_image_mode
     *
     * @return \OpenAPI\Client\Model\InitImageMode|null
     */
    public function getInitImageMode()
    {
        return $this->container['init_image_mode'];
    }

    /**
     * Sets init_image_mode
     *
     * @param \OpenAPI\Client\Model\InitImageMode|null $init_image_mode init_image_mode
     *
     * @return self
     */
    public function setInitImageMode($init_image_mode)
    {
        if (is_null($init_image_mode)) {
            throw new \InvalidArgumentException('non-nullable init_image_mode cannot be null');
        }
        $this->container['init_image_mode'] = $init_image_mode;

        return $this;
    }

    /**
     * Gets step_schedule_start
     *
     * @return float|null
     */
    public function getStepScheduleStart()
    {
        return $this->container['step_schedule_start'];
    }

    /**
     * Sets step_schedule_start
     *
     * @param float|null $step_schedule_start Skips a proportion of the start of the diffusion steps, allowing the init_image to influence the final generated image.  Lower values will result in more influence from the init_image, while higher values will result in more influence from the diffusion steps.  (e.g. a value of `0` would simply return you the init_image, where a value of `1` would return you a completely different image.)
     *
     * @return self
     */
    public function setStepScheduleStart($step_schedule_start)
    {
        if (is_null($step_schedule_start)) {
            throw new \InvalidArgumentException('non-nullable step_schedule_start cannot be null');
        }

        if (($step_schedule_start > 1)) {
            throw new \InvalidArgumentException('invalid value for $step_schedule_start when calling ImageToImageUsingStepScheduleRequestBody., must be smaller than or equal to 1.');
        }
        if (($step_schedule_start < 0)) {
            throw new \InvalidArgumentException('invalid value for $step_schedule_start when calling ImageToImageUsingStepScheduleRequestBody., must be bigger than or equal to 0.');
        }

        $this->container['step_schedule_start'] = $step_schedule_start;

        return $this;
    }

    /**
     * Gets step_schedule_end
     *
     * @return float|null
     */
    public function getStepScheduleEnd()
    {
        return $this->container['step_schedule_end'];
    }

    /**
     * Sets step_schedule_end
     *
     * @param float|null $step_schedule_end Skips a proportion of the end of the diffusion steps, allowing the init_image to influence the final generated image.  Lower values will result in more influence from the init_image, while higher values will result in more influence from the diffusion steps.
     *
     * @return self
     */
    public function setStepScheduleEnd($step_schedule_end)
    {
        if (is_null($step_schedule_end)) {
            throw new \InvalidArgumentException('non-nullable step_schedule_end cannot be null');
        }

        if (($step_schedule_end > 1)) {
            throw new \InvalidArgumentException('invalid value for $step_schedule_end when calling ImageToImageUsingStepScheduleRequestBody., must be smaller than or equal to 1.');
        }
        if (($step_schedule_end < 0)) {
            throw new \InvalidArgumentException('invalid value for $step_schedule_end when calling ImageToImageUsingStepScheduleRequestBody., must be bigger than or equal to 0.');
        }

        $this->container['step_schedule_end'] = $step_schedule_end;

        return $this;
    }

    /**
     * Gets cfg_scale
     *
     * @return float|null
     */
    public function getCfgScale()
    {
        return $this->container['cfg_scale'];
    }

    /**
     * Sets cfg_scale
     *
     * @param float|null $cfg_scale How strictly the diffusion process adheres to the prompt text (higher values keep your image closer to your prompt)
     *
     * @return self
     */
    public function setCfgScale($cfg_scale)
    {
        if (is_null($cfg_scale)) {
            throw new \InvalidArgumentException('non-nullable cfg_scale cannot be null');
        }

        if (($cfg_scale > 35)) {
            throw new \InvalidArgumentException('invalid value for $cfg_scale when calling ImageToImageUsingStepScheduleRequestBody., must be smaller than or equal to 35.');
        }
        if (($cfg_scale < 0)) {
            throw new \InvalidArgumentException('invalid value for $cfg_scale when calling ImageToImageUsingStepScheduleRequestBody., must be bigger than or equal to 0.');
        }

        $this->container['cfg_scale'] = $cfg_scale;

        return $this;
    }

    /**
     * Gets clip_guidance_preset
     *
     * @return \OpenAPI\Client\Model\ClipGuidancePreset|null
     */
    public function getClipGuidancePreset()
    {
        return $this->container['clip_guidance_preset'];
    }

    /**
     * Sets clip_guidance_preset
     *
     * @param \OpenAPI\Client\Model\ClipGuidancePreset|null $clip_guidance_preset clip_guidance_preset
     *
     * @return self
     */
    public function setClipGuidancePreset($clip_guidance_preset)
    {
        if (is_null($clip_guidance_preset)) {
            throw new \InvalidArgumentException('non-nullable clip_guidance_preset cannot be null');
        }
        $this->container['clip_guidance_preset'] = $clip_guidance_preset;

        return $this;
    }

    /**
     * Gets height
     *
     * @return int|null
     */
    public function getHeight()
    {
        return $this->container['height'];
    }

    /**
     * Sets height
     *
     * @param int|null $height Height of the image in pixels.  Must be in increments of 64 and pass the following validation: - For 768 engines: <span style='display: flex; justify-content: flex-start; gap:8px'>589,824 <span>≤</span> `height * width` <span>≤</span> 1,048,576</span> - All other engines: <span style='display: flex; justify-content: flex-start; gap:8px'>262,144 <span>≤</span> `height * width` <span>≤</span> 1,048,576</span>
     *
     * @return self
     */
    public function setHeight($height)
    {
        if (is_null($height)) {
            throw new \InvalidArgumentException('non-nullable height cannot be null');
        }

        if (($height < 128)) {
            throw new \InvalidArgumentException('invalid value for $height when calling ImageToImageUsingStepScheduleRequestBody., must be bigger than or equal to 128.');
        }

        $this->container['height'] = $height;

        return $this;
    }

    /**
     * Gets width
     *
     * @return int|null
     */
    public function getWidth()
    {
        return $this->container['width'];
    }

    /**
     * Sets width
     *
     * @param int|null $width Width of the image in pixels.  Must be in increments of 64 and pass the following validation: - For 768 engines: <span style='display: flex; justify-content: flex-start; gap:8px'>589,824 <span>≤</span> `height * width` <span>≤</span> 1,048,576</span> - All other engines: <span style='display: flex; justify-content: flex-start; gap:8px'>262,144 <span>≤</span> `height * width` <span>≤</span> 1,048,576</span>
     *
     * @return self
     */
    public function setWidth($width)
    {
        if (is_null($width)) {
            throw new \InvalidArgumentException('non-nullable width cannot be null');
        }

        if (($width < 128)) {
            throw new \InvalidArgumentException('invalid value for $width when calling ImageToImageUsingStepScheduleRequestBody., must be bigger than or equal to 128.');
        }

        $this->container['width'] = $width;

        return $this;
    }

    /**
     * Gets sampler
     *
     * @return \OpenAPI\Client\Model\Sampler|null
     */
    public function getSampler()
    {
        return $this->container['sampler'];
    }

    /**
     * Sets sampler
     *
     * @param \OpenAPI\Client\Model\Sampler|null $sampler sampler
     *
     * @return self
     */
    public function setSampler($sampler)
    {
        if (is_null($sampler)) {
            throw new \InvalidArgumentException('non-nullable sampler cannot be null');
        }
        $this->container['sampler'] = $sampler;

        return $this;
    }

    /**
     * Gets samples
     *
     * @return int|null
     */
    public function getSamples()
    {
        return $this->container['samples'];
    }

    /**
     * Sets samples
     *
     * @param int|null $samples Number of images to generate
     *
     * @return self
     */
    public function setSamples($samples)
    {
        if (is_null($samples)) {
            throw new \InvalidArgumentException('non-nullable samples cannot be null');
        }

        if (($samples > 10)) {
            throw new \InvalidArgumentException('invalid value for $samples when calling ImageToImageUsingStepScheduleRequestBody., must be smaller than or equal to 10.');
        }
        if (($samples < 1)) {
            throw new \InvalidArgumentException('invalid value for $samples when calling ImageToImageUsingStepScheduleRequestBody., must be bigger than or equal to 1.');
        }

        $this->container['samples'] = $samples;

        return $this;
    }

    /**
     * Gets seed
     *
     * @return int|null
     */
    public function getSeed()
    {
        return $this->container['seed'];
    }

    /**
     * Sets seed
     *
     * @param int|null $seed Random noise seed (omit this option or use `0` for a random seed)
     *
     * @return self
     */
    public function setSeed($seed)
    {
        if (is_null($seed)) {
            throw new \InvalidArgumentException('non-nullable seed cannot be null');
        }

        if (($seed > 4294967295)) {
            throw new \InvalidArgumentException('invalid value for $seed when calling ImageToImageUsingStepScheduleRequestBody., must be smaller than or equal to 4294967295.');
        }
        if (($seed < 0)) {
            throw new \InvalidArgumentException('invalid value for $seed when calling ImageToImageUsingStepScheduleRequestBody., must be bigger than or equal to 0.');
        }

        $this->container['seed'] = $seed;

        return $this;
    }

    /**
     * Gets steps
     *
     * @return int|null
     */
    public function getSteps()
    {
        return $this->container['steps'];
    }

    /**
     * Sets steps
     *
     * @param int|null $steps Number of diffusion steps to run
     *
     * @return self
     */
    public function setSteps($steps)
    {
        if (is_null($steps)) {
            throw new \InvalidArgumentException('non-nullable steps cannot be null');
        }

        if (($steps > 150)) {
            throw new \InvalidArgumentException('invalid value for $steps when calling ImageToImageUsingStepScheduleRequestBody., must be smaller than or equal to 150.');
        }
        if (($steps < 10)) {
            throw new \InvalidArgumentException('invalid value for $steps when calling ImageToImageUsingStepScheduleRequestBody., must be bigger than or equal to 10.');
        }

        $this->container['steps'] = $steps;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


