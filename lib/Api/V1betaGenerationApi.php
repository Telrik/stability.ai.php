<?php
/**
 * V1betaGenerationApi
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Stability.ai REST API
 *
 * Welcome to the Stability.ai REST API developer preview!  Please note, this is an beta version of our new REST API.  API operations use the following versioning scheme: - `/v*alpha*`: under development and the interface is subject to change - `/v*beta*`: interface is stable, preparing for production release - `/v*` interface is stable and ready for production workloads  Your DreamStudio API key will be required for authentication: [How to find your API key](https://platform.stability.ai/docs/getting-started/authentication)  If you have feedback or encounter any issues with the API, please reach out:   - [https://github.com/Stability-AI/REST-API](https://github.com/Stability-AI/REST-API)   - [https://discord.gg/stablediffusion #API channel](https://discord.com/channels/1002292111942635562/1042896447311454361)
 *
 * The version of the OpenAPI document: v1beta
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.3.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * V1betaGenerationApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class V1betaGenerationApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'imageToImage' => [
            'multipart/form-data',
        ],
        'masking' => [
            'multipart/form-data',
        ],
        'textToImage' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation imageToImage
     *
     * image-to-image
     *
     * @param  string $engine_id engine_id (required)
     * @param  \OpenAPI\Client\Model\TextPrompt[] $text_prompts An array of text prompts to use for generation.  Due to how arrays are represented in &#x60;multipart/form-data&#x60; requests, prompts must adhear to the format &#x60;text_prompts[index][text|weight]&#x60;, where &#x60;index&#x60; is some integer used to tie the text and weight together.  While &#x60;index&#x60; does not have to be sequential, duplicate entries  will override previous entries, so it is recommended to use sequential indices.  Given a text prompt with the text &#x60;A lighthouse on a cliff&#x60; and a weight of &#x60;0.5&#x60;, it would be represented as: &#x60;&#x60;&#x60; text_prompts[0][text]: \\\&quot;A lighthouse on a cliff\\\&quot; text_prompts[0][weight]: 0.5 &#x60;&#x60;&#x60;  To add another prompt to that request simply provide the values under a new &#x60;index&#x60;:  &#x60;&#x60;&#x60; text_prompts[0][text]: \\\&quot;A lighthouse on a cliff\\\&quot; text_prompts[0][weight]: 0.5 text_prompts[1][text]: \\\&quot;land, ground, dirt, grass\\\&quot; text_prompts[1][weight]: -0.9 &#x60;&#x60;&#x60; (required)
     * @param  \SplFileObject $init_image Image used to initialize the diffusion process, in lieu of random noise. (required)
     * @param  string $accept The format of the response.  Leave blank for JSON, or set to &#39;image/png&#39; for a PNG image. (optional, default to 'application/json')
     * @param  string $organization Allows for requests to be scoped to an organization other than the user&#39;s default.  If not provided, the user&#39;s default organization will be used. (optional)
     * @param  \OpenAPI\Client\Model\InitImageMode $init_image_mode init_image_mode (optional)
     * @param  float $image_strength How much influence the &#x60;init_image&#x60; has on the diffusion process. Values close to &#x60;1&#x60; will yield images very similar to the &#x60;init_image&#x60; while values close to &#x60;0&#x60; will yield images wildly different than the &#x60;init_image&#x60;. The behavior of this is meant to mirror DreamStudio&#39;s \\\&quot;Image Strength\\\&quot; slider.  &lt;br/&gt; &lt;br/&gt; This parameter is just an alternate way to set &#x60;step_schedule_start&#x60;, which is done via the calculation &#x60;1 - image_strength&#x60;. For example, passing in an Image Strength of 35% (&#x60;0.35&#x60;) would result in a &#x60;step_schedule_start&#x60; of &#x60;0.65&#x60;. (optional)
     * @param  float $step_schedule_start Skips a proportion of the start of the diffusion steps, allowing the init_image to influence the final generated image.  Lower values will result in more influence from the init_image, while higher values will result in more influence from the diffusion steps.  (e.g. a value of &#x60;0&#x60; would simply return you the init_image, where a value of &#x60;1&#x60; would return you a completely different image.) (optional)
     * @param  float $step_schedule_end Skips a proportion of the end of the diffusion steps, allowing the init_image to influence the final generated image.  Lower values will result in more influence from the init_image, while higher values will result in more influence from the diffusion steps. (optional)
     * @param  float $cfg_scale How strictly the diffusion process adheres to the prompt text (higher values keep your image closer to your prompt) (optional)
     * @param  \OpenAPI\Client\Model\ClipGuidancePreset $clip_guidance_preset clip_guidance_preset (optional)
     * @param  int $height Height of the image in pixels.  Must be in increments of 64 and pass the following validation: - For 768 engines: &lt;span style&#x3D;&#39;display: flex; justify-content: flex-start; gap:8px&#39;&gt;589,824 &lt;span&gt;≤&lt;/span&gt; &#x60;height * width&#x60; &lt;span&gt;≤&lt;/span&gt; 1,048,576&lt;/span&gt; - All other engines: &lt;span style&#x3D;&#39;display: flex; justify-content: flex-start; gap:8px&#39;&gt;262,144 &lt;span&gt;≤&lt;/span&gt; &#x60;height * width&#x60; &lt;span&gt;≤&lt;/span&gt; 1,048,576&lt;/span&gt; (optional)
     * @param  int $width Width of the image in pixels.  Must be in increments of 64 and pass the following validation: - For 768 engines: &lt;span style&#x3D;&#39;display: flex; justify-content: flex-start; gap:8px&#39;&gt;589,824 &lt;span&gt;≤&lt;/span&gt; &#x60;height * width&#x60; &lt;span&gt;≤&lt;/span&gt; 1,048,576&lt;/span&gt; - All other engines: &lt;span style&#x3D;&#39;display: flex; justify-content: flex-start; gap:8px&#39;&gt;262,144 &lt;span&gt;≤&lt;/span&gt; &#x60;height * width&#x60; &lt;span&gt;≤&lt;/span&gt; 1,048,576&lt;/span&gt; (optional)
     * @param  \OpenAPI\Client\Model\Sampler $sampler sampler (optional)
     * @param  int $samples Number of images to generate (optional)
     * @param  int $seed Random noise seed (omit this option or use &#x60;0&#x60; for a random seed) (optional)
     * @param  int $steps Number of diffusion steps to run (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['imageToImage'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Image[]|\OpenAPI\Client\Model\Error|\OpenAPI\Client\Model\Error|\OpenAPI\Client\Model\Error|\OpenAPI\Client\Model\Error|\OpenAPI\Client\Model\Error
     */
    public function imageToImage($engine_id, $text_prompts, $init_image, $accept = 'application/json', $organization = null, $init_image_mode = null, $image_strength = null, $step_schedule_start = null, $step_schedule_end = null, $cfg_scale = null, $clip_guidance_preset = null, $height = null, $width = null, $sampler = null, $samples = null, $seed = null, $steps = null, string $contentType = self::contentTypes['imageToImage'][0])
    {
        list($response) = $this->imageToImageWithHttpInfo($engine_id, $text_prompts, $init_image, $accept, $organization, $init_image_mode, $image_strength, $step_schedule_start, $step_schedule_end, $cfg_scale, $clip_guidance_preset, $height, $width, $sampler, $samples, $seed, $steps, $contentType);
        return $response;
    }

    /**
     * Operation imageToImageWithHttpInfo
     *
     * image-to-image
     *
     * @param  string $engine_id (required)
     * @param  \OpenAPI\Client\Model\TextPrompt[] $text_prompts An array of text prompts to use for generation.  Due to how arrays are represented in &#x60;multipart/form-data&#x60; requests, prompts must adhear to the format &#x60;text_prompts[index][text|weight]&#x60;, where &#x60;index&#x60; is some integer used to tie the text and weight together.  While &#x60;index&#x60; does not have to be sequential, duplicate entries  will override previous entries, so it is recommended to use sequential indices.  Given a text prompt with the text &#x60;A lighthouse on a cliff&#x60; and a weight of &#x60;0.5&#x60;, it would be represented as: &#x60;&#x60;&#x60; text_prompts[0][text]: \\\&quot;A lighthouse on a cliff\\\&quot; text_prompts[0][weight]: 0.5 &#x60;&#x60;&#x60;  To add another prompt to that request simply provide the values under a new &#x60;index&#x60;:  &#x60;&#x60;&#x60; text_prompts[0][text]: \\\&quot;A lighthouse on a cliff\\\&quot; text_prompts[0][weight]: 0.5 text_prompts[1][text]: \\\&quot;land, ground, dirt, grass\\\&quot; text_prompts[1][weight]: -0.9 &#x60;&#x60;&#x60; (required)
     * @param  \SplFileObject $init_image Image used to initialize the diffusion process, in lieu of random noise. (required)
     * @param  string $accept The format of the response.  Leave blank for JSON, or set to &#39;image/png&#39; for a PNG image. (optional, default to 'application/json')
     * @param  string $organization Allows for requests to be scoped to an organization other than the user&#39;s default.  If not provided, the user&#39;s default organization will be used. (optional)
     * @param  \OpenAPI\Client\Model\InitImageMode $init_image_mode (optional)
     * @param  float $image_strength How much influence the &#x60;init_image&#x60; has on the diffusion process. Values close to &#x60;1&#x60; will yield images very similar to the &#x60;init_image&#x60; while values close to &#x60;0&#x60; will yield images wildly different than the &#x60;init_image&#x60;. The behavior of this is meant to mirror DreamStudio&#39;s \\\&quot;Image Strength\\\&quot; slider.  &lt;br/&gt; &lt;br/&gt; This parameter is just an alternate way to set &#x60;step_schedule_start&#x60;, which is done via the calculation &#x60;1 - image_strength&#x60;. For example, passing in an Image Strength of 35% (&#x60;0.35&#x60;) would result in a &#x60;step_schedule_start&#x60; of &#x60;0.65&#x60;. (optional)
     * @param  float $step_schedule_start Skips a proportion of the start of the diffusion steps, allowing the init_image to influence the final generated image.  Lower values will result in more influence from the init_image, while higher values will result in more influence from the diffusion steps.  (e.g. a value of &#x60;0&#x60; would simply return you the init_image, where a value of &#x60;1&#x60; would return you a completely different image.) (optional)
     * @param  float $step_schedule_end Skips a proportion of the end of the diffusion steps, allowing the init_image to influence the final generated image.  Lower values will result in more influence from the init_image, while higher values will result in more influence from the diffusion steps. (optional)
     * @param  float $cfg_scale How strictly the diffusion process adheres to the prompt text (higher values keep your image closer to your prompt) (optional)
     * @param  \OpenAPI\Client\Model\ClipGuidancePreset $clip_guidance_preset (optional)
     * @param  int $height Height of the image in pixels.  Must be in increments of 64 and pass the following validation: - For 768 engines: &lt;span style&#x3D;&#39;display: flex; justify-content: flex-start; gap:8px&#39;&gt;589,824 &lt;span&gt;≤&lt;/span&gt; &#x60;height * width&#x60; &lt;span&gt;≤&lt;/span&gt; 1,048,576&lt;/span&gt; - All other engines: &lt;span style&#x3D;&#39;display: flex; justify-content: flex-start; gap:8px&#39;&gt;262,144 &lt;span&gt;≤&lt;/span&gt; &#x60;height * width&#x60; &lt;span&gt;≤&lt;/span&gt; 1,048,576&lt;/span&gt; (optional)
     * @param  int $width Width of the image in pixels.  Must be in increments of 64 and pass the following validation: - For 768 engines: &lt;span style&#x3D;&#39;display: flex; justify-content: flex-start; gap:8px&#39;&gt;589,824 &lt;span&gt;≤&lt;/span&gt; &#x60;height * width&#x60; &lt;span&gt;≤&lt;/span&gt; 1,048,576&lt;/span&gt; - All other engines: &lt;span style&#x3D;&#39;display: flex; justify-content: flex-start; gap:8px&#39;&gt;262,144 &lt;span&gt;≤&lt;/span&gt; &#x60;height * width&#x60; &lt;span&gt;≤&lt;/span&gt; 1,048,576&lt;/span&gt; (optional)
     * @param  \OpenAPI\Client\Model\Sampler $sampler (optional)
     * @param  int $samples Number of images to generate (optional)
     * @param  int $seed Random noise seed (omit this option or use &#x60;0&#x60; for a random seed) (optional)
     * @param  int $steps Number of diffusion steps to run (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['imageToImage'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Image[]|\OpenAPI\Client\Model\Error|\OpenAPI\Client\Model\Error|\OpenAPI\Client\Model\Error|\OpenAPI\Client\Model\Error|\OpenAPI\Client\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function imageToImageWithHttpInfo($engine_id, $text_prompts, $init_image, $accept = 'application/json', $organization = null, $init_image_mode = null, $image_strength = null, $step_schedule_start = null, $step_schedule_end = null, $cfg_scale = null, $clip_guidance_preset = null, $height = null, $width = null, $sampler = null, $samples = null, $seed = null, $steps = null, string $contentType = self::contentTypes['imageToImage'][0])
    {
        $request = $this->imageToImageRequest($engine_id, $text_prompts, $init_image, $accept, $organization, $init_image_mode, $image_strength, $step_schedule_start, $step_schedule_end, $cfg_scale, $clip_guidance_preset, $height, $width, $sampler, $samples, $seed, $steps, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\Image[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Image[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Image[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\Image[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Image[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation imageToImageAsync
     *
     * image-to-image
     *
     * @param  string $engine_id (required)
     * @param  \OpenAPI\Client\Model\TextPrompt[] $text_prompts An array of text prompts to use for generation.  Due to how arrays are represented in &#x60;multipart/form-data&#x60; requests, prompts must adhear to the format &#x60;text_prompts[index][text|weight]&#x60;, where &#x60;index&#x60; is some integer used to tie the text and weight together.  While &#x60;index&#x60; does not have to be sequential, duplicate entries  will override previous entries, so it is recommended to use sequential indices.  Given a text prompt with the text &#x60;A lighthouse on a cliff&#x60; and a weight of &#x60;0.5&#x60;, it would be represented as: &#x60;&#x60;&#x60; text_prompts[0][text]: \\\&quot;A lighthouse on a cliff\\\&quot; text_prompts[0][weight]: 0.5 &#x60;&#x60;&#x60;  To add another prompt to that request simply provide the values under a new &#x60;index&#x60;:  &#x60;&#x60;&#x60; text_prompts[0][text]: \\\&quot;A lighthouse on a cliff\\\&quot; text_prompts[0][weight]: 0.5 text_prompts[1][text]: \\\&quot;land, ground, dirt, grass\\\&quot; text_prompts[1][weight]: -0.9 &#x60;&#x60;&#x60; (required)
     * @param  \SplFileObject $init_image Image used to initialize the diffusion process, in lieu of random noise. (required)
     * @param  string $accept The format of the response.  Leave blank for JSON, or set to &#39;image/png&#39; for a PNG image. (optional, default to 'application/json')
     * @param  string $organization Allows for requests to be scoped to an organization other than the user&#39;s default.  If not provided, the user&#39;s default organization will be used. (optional)
     * @param  \OpenAPI\Client\Model\InitImageMode $init_image_mode (optional)
     * @param  float $image_strength How much influence the &#x60;init_image&#x60; has on the diffusion process. Values close to &#x60;1&#x60; will yield images very similar to the &#x60;init_image&#x60; while values close to &#x60;0&#x60; will yield images wildly different than the &#x60;init_image&#x60;. The behavior of this is meant to mirror DreamStudio&#39;s \\\&quot;Image Strength\\\&quot; slider.  &lt;br/&gt; &lt;br/&gt; This parameter is just an alternate way to set &#x60;step_schedule_start&#x60;, which is done via the calculation &#x60;1 - image_strength&#x60;. For example, passing in an Image Strength of 35% (&#x60;0.35&#x60;) would result in a &#x60;step_schedule_start&#x60; of &#x60;0.65&#x60;. (optional)
     * @param  float $step_schedule_start Skips a proportion of the start of the diffusion steps, allowing the init_image to influence the final generated image.  Lower values will result in more influence from the init_image, while higher values will result in more influence from the diffusion steps.  (e.g. a value of &#x60;0&#x60; would simply return you the init_image, where a value of &#x60;1&#x60; would return you a completely different image.) (optional)
     * @param  float $step_schedule_end Skips a proportion of the end of the diffusion steps, allowing the init_image to influence the final generated image.  Lower values will result in more influence from the init_image, while higher values will result in more influence from the diffusion steps. (optional)
     * @param  float $cfg_scale How strictly the diffusion process adheres to the prompt text (higher values keep your image closer to your prompt) (optional)
     * @param  \OpenAPI\Client\Model\ClipGuidancePreset $clip_guidance_preset (optional)
     * @param  int $height Height of the image in pixels.  Must be in increments of 64 and pass the following validation: - For 768 engines: &lt;span style&#x3D;&#39;display: flex; justify-content: flex-start; gap:8px&#39;&gt;589,824 &lt;span&gt;≤&lt;/span&gt; &#x60;height * width&#x60; &lt;span&gt;≤&lt;/span&gt; 1,048,576&lt;/span&gt; - All other engines: &lt;span style&#x3D;&#39;display: flex; justify-content: flex-start; gap:8px&#39;&gt;262,144 &lt;span&gt;≤&lt;/span&gt; &#x60;height * width&#x60; &lt;span&gt;≤&lt;/span&gt; 1,048,576&lt;/span&gt; (optional)
     * @param  int $width Width of the image in pixels.  Must be in increments of 64 and pass the following validation: - For 768 engines: &lt;span style&#x3D;&#39;display: flex; justify-content: flex-start; gap:8px&#39;&gt;589,824 &lt;span&gt;≤&lt;/span&gt; &#x60;height * width&#x60; &lt;span&gt;≤&lt;/span&gt; 1,048,576&lt;/span&gt; - All other engines: &lt;span style&#x3D;&#39;display: flex; justify-content: flex-start; gap:8px&#39;&gt;262,144 &lt;span&gt;≤&lt;/span&gt; &#x60;height * width&#x60; &lt;span&gt;≤&lt;/span&gt; 1,048,576&lt;/span&gt; (optional)
     * @param  \OpenAPI\Client\Model\Sampler $sampler (optional)
     * @param  int $samples Number of images to generate (optional)
     * @param  int $seed Random noise seed (omit this option or use &#x60;0&#x60; for a random seed) (optional)
     * @param  int $steps Number of diffusion steps to run (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['imageToImage'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function imageToImageAsync($engine_id, $text_prompts, $init_image, $accept = 'application/json', $organization = null, $init_image_mode = null, $image_strength = null, $step_schedule_start = null, $step_schedule_end = null, $cfg_scale = null, $clip_guidance_preset = null, $height = null, $width = null, $sampler = null, $samples = null, $seed = null, $steps = null, string $contentType = self::contentTypes['imageToImage'][0])
    {
        return $this->imageToImageAsyncWithHttpInfo($engine_id, $text_prompts, $init_image, $accept, $organization, $init_image_mode, $image_strength, $step_schedule_start, $step_schedule_end, $cfg_scale, $clip_guidance_preset, $height, $width, $sampler, $samples, $seed, $steps, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation imageToImageAsyncWithHttpInfo
     *
     * image-to-image
     *
     * @param  string $engine_id (required)
     * @param  \OpenAPI\Client\Model\TextPrompt[] $text_prompts An array of text prompts to use for generation.  Due to how arrays are represented in &#x60;multipart/form-data&#x60; requests, prompts must adhear to the format &#x60;text_prompts[index][text|weight]&#x60;, where &#x60;index&#x60; is some integer used to tie the text and weight together.  While &#x60;index&#x60; does not have to be sequential, duplicate entries  will override previous entries, so it is recommended to use sequential indices.  Given a text prompt with the text &#x60;A lighthouse on a cliff&#x60; and a weight of &#x60;0.5&#x60;, it would be represented as: &#x60;&#x60;&#x60; text_prompts[0][text]: \\\&quot;A lighthouse on a cliff\\\&quot; text_prompts[0][weight]: 0.5 &#x60;&#x60;&#x60;  To add another prompt to that request simply provide the values under a new &#x60;index&#x60;:  &#x60;&#x60;&#x60; text_prompts[0][text]: \\\&quot;A lighthouse on a cliff\\\&quot; text_prompts[0][weight]: 0.5 text_prompts[1][text]: \\\&quot;land, ground, dirt, grass\\\&quot; text_prompts[1][weight]: -0.9 &#x60;&#x60;&#x60; (required)
     * @param  \SplFileObject $init_image Image used to initialize the diffusion process, in lieu of random noise. (required)
     * @param  string $accept The format of the response.  Leave blank for JSON, or set to &#39;image/png&#39; for a PNG image. (optional, default to 'application/json')
     * @param  string $organization Allows for requests to be scoped to an organization other than the user&#39;s default.  If not provided, the user&#39;s default organization will be used. (optional)
     * @param  \OpenAPI\Client\Model\InitImageMode $init_image_mode (optional)
     * @param  float $image_strength How much influence the &#x60;init_image&#x60; has on the diffusion process. Values close to &#x60;1&#x60; will yield images very similar to the &#x60;init_image&#x60; while values close to &#x60;0&#x60; will yield images wildly different than the &#x60;init_image&#x60;. The behavior of this is meant to mirror DreamStudio&#39;s \\\&quot;Image Strength\\\&quot; slider.  &lt;br/&gt; &lt;br/&gt; This parameter is just an alternate way to set &#x60;step_schedule_start&#x60;, which is done via the calculation &#x60;1 - image_strength&#x60;. For example, passing in an Image Strength of 35% (&#x60;0.35&#x60;) would result in a &#x60;step_schedule_start&#x60; of &#x60;0.65&#x60;. (optional)
     * @param  float $step_schedule_start Skips a proportion of the start of the diffusion steps, allowing the init_image to influence the final generated image.  Lower values will result in more influence from the init_image, while higher values will result in more influence from the diffusion steps.  (e.g. a value of &#x60;0&#x60; would simply return you the init_image, where a value of &#x60;1&#x60; would return you a completely different image.) (optional)
     * @param  float $step_schedule_end Skips a proportion of the end of the diffusion steps, allowing the init_image to influence the final generated image.  Lower values will result in more influence from the init_image, while higher values will result in more influence from the diffusion steps. (optional)
     * @param  float $cfg_scale How strictly the diffusion process adheres to the prompt text (higher values keep your image closer to your prompt) (optional)
     * @param  \OpenAPI\Client\Model\ClipGuidancePreset $clip_guidance_preset (optional)
     * @param  int $height Height of the image in pixels.  Must be in increments of 64 and pass the following validation: - For 768 engines: &lt;span style&#x3D;&#39;display: flex; justify-content: flex-start; gap:8px&#39;&gt;589,824 &lt;span&gt;≤&lt;/span&gt; &#x60;height * width&#x60; &lt;span&gt;≤&lt;/span&gt; 1,048,576&lt;/span&gt; - All other engines: &lt;span style&#x3D;&#39;display: flex; justify-content: flex-start; gap:8px&#39;&gt;262,144 &lt;span&gt;≤&lt;/span&gt; &#x60;height * width&#x60; &lt;span&gt;≤&lt;/span&gt; 1,048,576&lt;/span&gt; (optional)
     * @param  int $width Width of the image in pixels.  Must be in increments of 64 and pass the following validation: - For 768 engines: &lt;span style&#x3D;&#39;display: flex; justify-content: flex-start; gap:8px&#39;&gt;589,824 &lt;span&gt;≤&lt;/span&gt; &#x60;height * width&#x60; &lt;span&gt;≤&lt;/span&gt; 1,048,576&lt;/span&gt; - All other engines: &lt;span style&#x3D;&#39;display: flex; justify-content: flex-start; gap:8px&#39;&gt;262,144 &lt;span&gt;≤&lt;/span&gt; &#x60;height * width&#x60; &lt;span&gt;≤&lt;/span&gt; 1,048,576&lt;/span&gt; (optional)
     * @param  \OpenAPI\Client\Model\Sampler $sampler (optional)
     * @param  int $samples Number of images to generate (optional)
     * @param  int $seed Random noise seed (omit this option or use &#x60;0&#x60; for a random seed) (optional)
     * @param  int $steps Number of diffusion steps to run (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['imageToImage'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function imageToImageAsyncWithHttpInfo($engine_id, $text_prompts, $init_image, $accept = 'application/json', $organization = null, $init_image_mode = null, $image_strength = null, $step_schedule_start = null, $step_schedule_end = null, $cfg_scale = null, $clip_guidance_preset = null, $height = null, $width = null, $sampler = null, $samples = null, $seed = null, $steps = null, string $contentType = self::contentTypes['imageToImage'][0])
    {
        $returnType = '\OpenAPI\Client\Model\Image[]';
        $request = $this->imageToImageRequest($engine_id, $text_prompts, $init_image, $accept, $organization, $init_image_mode, $image_strength, $step_schedule_start, $step_schedule_end, $cfg_scale, $clip_guidance_preset, $height, $width, $sampler, $samples, $seed, $steps, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'imageToImage'
     *
     * @param  string $engine_id (required)
     * @param  \OpenAPI\Client\Model\TextPrompt[] $text_prompts An array of text prompts to use for generation.  Due to how arrays are represented in &#x60;multipart/form-data&#x60; requests, prompts must adhear to the format &#x60;text_prompts[index][text|weight]&#x60;, where &#x60;index&#x60; is some integer used to tie the text and weight together.  While &#x60;index&#x60; does not have to be sequential, duplicate entries  will override previous entries, so it is recommended to use sequential indices.  Given a text prompt with the text &#x60;A lighthouse on a cliff&#x60; and a weight of &#x60;0.5&#x60;, it would be represented as: &#x60;&#x60;&#x60; text_prompts[0][text]: \\\&quot;A lighthouse on a cliff\\\&quot; text_prompts[0][weight]: 0.5 &#x60;&#x60;&#x60;  To add another prompt to that request simply provide the values under a new &#x60;index&#x60;:  &#x60;&#x60;&#x60; text_prompts[0][text]: \\\&quot;A lighthouse on a cliff\\\&quot; text_prompts[0][weight]: 0.5 text_prompts[1][text]: \\\&quot;land, ground, dirt, grass\\\&quot; text_prompts[1][weight]: -0.9 &#x60;&#x60;&#x60; (required)
     * @param  \SplFileObject $init_image Image used to initialize the diffusion process, in lieu of random noise. (required)
     * @param  string $accept The format of the response.  Leave blank for JSON, or set to &#39;image/png&#39; for a PNG image. (optional, default to 'application/json')
     * @param  string $organization Allows for requests to be scoped to an organization other than the user&#39;s default.  If not provided, the user&#39;s default organization will be used. (optional)
     * @param  \OpenAPI\Client\Model\InitImageMode $init_image_mode (optional)
     * @param  float $image_strength How much influence the &#x60;init_image&#x60; has on the diffusion process. Values close to &#x60;1&#x60; will yield images very similar to the &#x60;init_image&#x60; while values close to &#x60;0&#x60; will yield images wildly different than the &#x60;init_image&#x60;. The behavior of this is meant to mirror DreamStudio&#39;s \\\&quot;Image Strength\\\&quot; slider.  &lt;br/&gt; &lt;br/&gt; This parameter is just an alternate way to set &#x60;step_schedule_start&#x60;, which is done via the calculation &#x60;1 - image_strength&#x60;. For example, passing in an Image Strength of 35% (&#x60;0.35&#x60;) would result in a &#x60;step_schedule_start&#x60; of &#x60;0.65&#x60;. (optional)
     * @param  float $step_schedule_start Skips a proportion of the start of the diffusion steps, allowing the init_image to influence the final generated image.  Lower values will result in more influence from the init_image, while higher values will result in more influence from the diffusion steps.  (e.g. a value of &#x60;0&#x60; would simply return you the init_image, where a value of &#x60;1&#x60; would return you a completely different image.) (optional)
     * @param  float $step_schedule_end Skips a proportion of the end of the diffusion steps, allowing the init_image to influence the final generated image.  Lower values will result in more influence from the init_image, while higher values will result in more influence from the diffusion steps. (optional)
     * @param  float $cfg_scale How strictly the diffusion process adheres to the prompt text (higher values keep your image closer to your prompt) (optional)
     * @param  \OpenAPI\Client\Model\ClipGuidancePreset $clip_guidance_preset (optional)
     * @param  int $height Height of the image in pixels.  Must be in increments of 64 and pass the following validation: - For 768 engines: &lt;span style&#x3D;&#39;display: flex; justify-content: flex-start; gap:8px&#39;&gt;589,824 &lt;span&gt;≤&lt;/span&gt; &#x60;height * width&#x60; &lt;span&gt;≤&lt;/span&gt; 1,048,576&lt;/span&gt; - All other engines: &lt;span style&#x3D;&#39;display: flex; justify-content: flex-start; gap:8px&#39;&gt;262,144 &lt;span&gt;≤&lt;/span&gt; &#x60;height * width&#x60; &lt;span&gt;≤&lt;/span&gt; 1,048,576&lt;/span&gt; (optional)
     * @param  int $width Width of the image in pixels.  Must be in increments of 64 and pass the following validation: - For 768 engines: &lt;span style&#x3D;&#39;display: flex; justify-content: flex-start; gap:8px&#39;&gt;589,824 &lt;span&gt;≤&lt;/span&gt; &#x60;height * width&#x60; &lt;span&gt;≤&lt;/span&gt; 1,048,576&lt;/span&gt; - All other engines: &lt;span style&#x3D;&#39;display: flex; justify-content: flex-start; gap:8px&#39;&gt;262,144 &lt;span&gt;≤&lt;/span&gt; &#x60;height * width&#x60; &lt;span&gt;≤&lt;/span&gt; 1,048,576&lt;/span&gt; (optional)
     * @param  \OpenAPI\Client\Model\Sampler $sampler (optional)
     * @param  int $samples Number of images to generate (optional)
     * @param  int $seed Random noise seed (omit this option or use &#x60;0&#x60; for a random seed) (optional)
     * @param  int $steps Number of diffusion steps to run (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['imageToImage'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function imageToImageRequest($engine_id, $text_prompts, $init_image, $accept = 'application/json', $organization = null, $init_image_mode = null, $image_strength = null, $step_schedule_start = null, $step_schedule_end = null, $cfg_scale = null, $clip_guidance_preset = null, $height = null, $width = null, $sampler = null, $samples = null, $seed = null, $steps = null, string $contentType = self::contentTypes['imageToImage'][0])
    {

        // verify the required parameter 'engine_id' is set
        if ($engine_id === null || (is_array($engine_id) && count($engine_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $engine_id when calling imageToImage'
            );
        }

        // verify the required parameter 'text_prompts' is set
        if ($text_prompts === null || (is_array($text_prompts) && count($text_prompts) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $text_prompts when calling imageToImage'
            );
        }
        if (count($text_prompts) < 1) {
            throw new \InvalidArgumentException('invalid value for "$text_prompts" when calling V1betaGenerationApi.imageToImage, number of items must be greater than or equal to 1.');
        }
        
        // verify the required parameter 'init_image' is set
        if ($init_image === null || (is_array($init_image) && count($init_image) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $init_image when calling imageToImage'
            );
        }




        if ($image_strength !== null && $image_strength > 1) {
            throw new \InvalidArgumentException('invalid value for "$image_strength" when calling V1betaGenerationApi.imageToImage, must be smaller than or equal to 1.');
        }
        if ($image_strength !== null && $image_strength < 0) {
            throw new \InvalidArgumentException('invalid value for "$image_strength" when calling V1betaGenerationApi.imageToImage, must be bigger than or equal to 0.');
        }
        
        if ($step_schedule_start !== null && $step_schedule_start > 1) {
            throw new \InvalidArgumentException('invalid value for "$step_schedule_start" when calling V1betaGenerationApi.imageToImage, must be smaller than or equal to 1.');
        }
        if ($step_schedule_start !== null && $step_schedule_start < 0) {
            throw new \InvalidArgumentException('invalid value for "$step_schedule_start" when calling V1betaGenerationApi.imageToImage, must be bigger than or equal to 0.');
        }
        
        if ($step_schedule_end !== null && $step_schedule_end > 1) {
            throw new \InvalidArgumentException('invalid value for "$step_schedule_end" when calling V1betaGenerationApi.imageToImage, must be smaller than or equal to 1.');
        }
        if ($step_schedule_end !== null && $step_schedule_end < 0) {
            throw new \InvalidArgumentException('invalid value for "$step_schedule_end" when calling V1betaGenerationApi.imageToImage, must be bigger than or equal to 0.');
        }
        
        if ($cfg_scale !== null && $cfg_scale > 35) {
            throw new \InvalidArgumentException('invalid value for "$cfg_scale" when calling V1betaGenerationApi.imageToImage, must be smaller than or equal to 35.');
        }
        if ($cfg_scale !== null && $cfg_scale < 0) {
            throw new \InvalidArgumentException('invalid value for "$cfg_scale" when calling V1betaGenerationApi.imageToImage, must be bigger than or equal to 0.');
        }
        

        if ($height !== null && $height < 128) {
            throw new \InvalidArgumentException('invalid value for "$height" when calling V1betaGenerationApi.imageToImage, must be bigger than or equal to 128.');
        }
        
        if ($width !== null && $width < 128) {
            throw new \InvalidArgumentException('invalid value for "$width" when calling V1betaGenerationApi.imageToImage, must be bigger than or equal to 128.');
        }
        

        if ($samples !== null && $samples > 10) {
            throw new \InvalidArgumentException('invalid value for "$samples" when calling V1betaGenerationApi.imageToImage, must be smaller than or equal to 10.');
        }
        if ($samples !== null && $samples < 1) {
            throw new \InvalidArgumentException('invalid value for "$samples" when calling V1betaGenerationApi.imageToImage, must be bigger than or equal to 1.');
        }
        
        if ($seed !== null && $seed > 4294967295) {
            throw new \InvalidArgumentException('invalid value for "$seed" when calling V1betaGenerationApi.imageToImage, must be smaller than or equal to 4294967295.');
        }
        if ($seed !== null && $seed < 0) {
            throw new \InvalidArgumentException('invalid value for "$seed" when calling V1betaGenerationApi.imageToImage, must be bigger than or equal to 0.');
        }
        
        if ($steps !== null && $steps > 150) {
            throw new \InvalidArgumentException('invalid value for "$steps" when calling V1betaGenerationApi.imageToImage, must be smaller than or equal to 150.');
        }
        if ($steps !== null && $steps < 10) {
            throw new \InvalidArgumentException('invalid value for "$steps" when calling V1betaGenerationApi.imageToImage, must be bigger than or equal to 10.');
        }
        

        $resourcePath = '/v1beta/generation/{engine_id}/image-to-image';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($organization !== null) {
            $headerParams['Organization'] = ObjectSerializer::toHeaderValue($organization);
        }

        // path params
        if ($engine_id !== null) {
            $resourcePath = str_replace(
                '{' . 'engine_id' . '}',
                ObjectSerializer::toPathValue($engine_id),
                $resourcePath
            );
        }

        // form params
        if ($text_prompts !== null) {
            $formParams['text_prompts'] = ObjectSerializer::toFormValue($text_prompts);
        }
        // form params
        if ($init_image !== null) {
            $multipart = true;
            $formParams['init_image'] = [];
            $paramFiles = is_array($init_image) ? $init_image : [$init_image];
            foreach ($paramFiles as $paramFile) {
                $formParams['init_image'][] = \GuzzleHttp\Psr7\Utils::tryFopen(
                    ObjectSerializer::toFormValue($paramFile),
                    'rb'
                );
            }
        }
        // form params
        if ($init_image_mode !== null) {
            $formParams['init_image_mode'] = ObjectSerializer::toFormValue($init_image_mode);
        }
        // form params
        if ($image_strength !== null) {
            $formParams['image_strength'] = ObjectSerializer::toFormValue($image_strength);
        }
        // form params
        if ($step_schedule_start !== null) {
            $formParams['step_schedule_start'] = ObjectSerializer::toFormValue($step_schedule_start);
        }
        // form params
        if ($step_schedule_end !== null) {
            $formParams['step_schedule_end'] = ObjectSerializer::toFormValue($step_schedule_end);
        }
        // form params
        if ($cfg_scale !== null) {
            $formParams['cfg_scale'] = ObjectSerializer::toFormValue($cfg_scale);
        }
        // form params
        if ($clip_guidance_preset !== null) {
            $formParams['clip_guidance_preset'] = ObjectSerializer::toFormValue($clip_guidance_preset);
        }
        // form params
        if ($height !== null) {
            $formParams['height'] = ObjectSerializer::toFormValue($height);
        }
        // form params
        if ($width !== null) {
            $formParams['width'] = ObjectSerializer::toFormValue($width);
        }
        // form params
        if ($sampler !== null) {
            $formParams['sampler'] = ObjectSerializer::toFormValue($sampler);
        }
        // form params
        if ($samples !== null) {
            $formParams['samples'] = ObjectSerializer::toFormValue($samples);
        }
        // form params
        if ($seed !== null) {
            $formParams['seed'] = ObjectSerializer::toFormValue($seed);
        }
        // form params
        if ($steps !== null) {
            $formParams['steps'] = ObjectSerializer::toFormValue($steps);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'image/png', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation masking
     *
     * image-to-image/masking
     *
     * @param  string $engine_id engine_id (required)
     * @param  \SplFileObject $init_image Image used to initialize the diffusion process, in lieu of random noise. (required)
     * @param  string $mask_source For any given pixel, the mask determines the strength of generation on a linear scale.  This parameter determines where to source the mask from: - &#x60;MASK_IMAGE_WHITE&#x60; will use the white pixels of the mask_image as the mask, where white pixels are completely replaced and black pixels are unchanged - &#x60;MASK_IMAGE_BLACK&#x60; will use the black pixels of the mask_image as the mask, where black pixels are completely replaced and white pixels are unchanged - &#x60;INIT_IMAGE_ALPHA&#x60; will use the alpha channel of the init_image as the mask, where fully transparent pixels are completely replaced and fully opaque pixels are unchanged (required)
     * @param  \OpenAPI\Client\Model\TextPrompt[] $text_prompts An array of text prompts to use for generation.  Due to how arrays are represented in &#x60;multipart/form-data&#x60; requests, prompts must adhear to the format &#x60;text_prompts[index][text|weight]&#x60;, where &#x60;index&#x60; is some integer used to tie the text and weight together.  While &#x60;index&#x60; does not have to be sequential, duplicate entries  will override previous entries, so it is recommended to use sequential indices.  Given a text prompt with the text &#x60;A lighthouse on a cliff&#x60; and a weight of &#x60;0.5&#x60;, it would be represented as: &#x60;&#x60;&#x60; text_prompts[0][text]: \\\&quot;A lighthouse on a cliff\\\&quot; text_prompts[0][weight]: 0.5 &#x60;&#x60;&#x60;  To add another prompt to that request simply provide the values under a new &#x60;index&#x60;:  &#x60;&#x60;&#x60; text_prompts[0][text]: \\\&quot;A lighthouse on a cliff\\\&quot; text_prompts[0][weight]: 0.5 text_prompts[1][text]: \\\&quot;land, ground, dirt, grass\\\&quot; text_prompts[1][weight]: -0.9 &#x60;&#x60;&#x60; (required)
     * @param  string $accept The format of the response.  Leave blank for JSON, or set to &#39;image/png&#39; for a PNG image. (optional, default to 'application/json')
     * @param  string $organization Allows for requests to be scoped to an organization other than the user&#39;s default.  If not provided, the user&#39;s default organization will be used. (optional)
     * @param  \SplFileObject $mask_image Optional grayscale mask that allows for influence over which pixels are eligible for diffusion and at what strength. Must be the same dimensions as the &#x60;init_image&#x60;. Use the &#x60;mask_source&#x60; option to specify whether the white or black pixels should be inpainted. (optional)
     * @param  float $cfg_scale How strictly the diffusion process adheres to the prompt text (higher values keep your image closer to your prompt) (optional)
     * @param  \OpenAPI\Client\Model\ClipGuidancePreset $clip_guidance_preset clip_guidance_preset (optional)
     * @param  int $height Height of the image in pixels.  Must be in increments of 64 and pass the following validation: - For 768 engines: &lt;span style&#x3D;&#39;display: flex; justify-content: flex-start; gap:8px&#39;&gt;589,824 &lt;span&gt;≤&lt;/span&gt; &#x60;height * width&#x60; &lt;span&gt;≤&lt;/span&gt; 1,048,576&lt;/span&gt; - All other engines: &lt;span style&#x3D;&#39;display: flex; justify-content: flex-start; gap:8px&#39;&gt;262,144 &lt;span&gt;≤&lt;/span&gt; &#x60;height * width&#x60; &lt;span&gt;≤&lt;/span&gt; 1,048,576&lt;/span&gt; (optional)
     * @param  int $width Width of the image in pixels.  Must be in increments of 64 and pass the following validation: - For 768 engines: &lt;span style&#x3D;&#39;display: flex; justify-content: flex-start; gap:8px&#39;&gt;589,824 &lt;span&gt;≤&lt;/span&gt; &#x60;height * width&#x60; &lt;span&gt;≤&lt;/span&gt; 1,048,576&lt;/span&gt; - All other engines: &lt;span style&#x3D;&#39;display: flex; justify-content: flex-start; gap:8px&#39;&gt;262,144 &lt;span&gt;≤&lt;/span&gt; &#x60;height * width&#x60; &lt;span&gt;≤&lt;/span&gt; 1,048,576&lt;/span&gt; (optional)
     * @param  \OpenAPI\Client\Model\Sampler $sampler sampler (optional)
     * @param  int $samples Number of images to generate (optional)
     * @param  int $seed Random noise seed (omit this option or use &#x60;0&#x60; for a random seed) (optional)
     * @param  int $steps Number of diffusion steps to run (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['masking'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Image[]|\OpenAPI\Client\Model\Error|\OpenAPI\Client\Model\Error|\OpenAPI\Client\Model\Error|\OpenAPI\Client\Model\Error|\OpenAPI\Client\Model\Error
     */
    public function masking($engine_id, $init_image, $mask_source, $text_prompts, $accept = 'application/json', $organization = null, $mask_image = null, $cfg_scale = null, $clip_guidance_preset = null, $height = null, $width = null, $sampler = null, $samples = null, $seed = null, $steps = null, string $contentType = self::contentTypes['masking'][0])
    {
        list($response) = $this->maskingWithHttpInfo($engine_id, $init_image, $mask_source, $text_prompts, $accept, $organization, $mask_image, $cfg_scale, $clip_guidance_preset, $height, $width, $sampler, $samples, $seed, $steps, $contentType);
        return $response;
    }

    /**
     * Operation maskingWithHttpInfo
     *
     * image-to-image/masking
     *
     * @param  string $engine_id (required)
     * @param  \SplFileObject $init_image Image used to initialize the diffusion process, in lieu of random noise. (required)
     * @param  string $mask_source For any given pixel, the mask determines the strength of generation on a linear scale.  This parameter determines where to source the mask from: - &#x60;MASK_IMAGE_WHITE&#x60; will use the white pixels of the mask_image as the mask, where white pixels are completely replaced and black pixels are unchanged - &#x60;MASK_IMAGE_BLACK&#x60; will use the black pixels of the mask_image as the mask, where black pixels are completely replaced and white pixels are unchanged - &#x60;INIT_IMAGE_ALPHA&#x60; will use the alpha channel of the init_image as the mask, where fully transparent pixels are completely replaced and fully opaque pixels are unchanged (required)
     * @param  \OpenAPI\Client\Model\TextPrompt[] $text_prompts An array of text prompts to use for generation.  Due to how arrays are represented in &#x60;multipart/form-data&#x60; requests, prompts must adhear to the format &#x60;text_prompts[index][text|weight]&#x60;, where &#x60;index&#x60; is some integer used to tie the text and weight together.  While &#x60;index&#x60; does not have to be sequential, duplicate entries  will override previous entries, so it is recommended to use sequential indices.  Given a text prompt with the text &#x60;A lighthouse on a cliff&#x60; and a weight of &#x60;0.5&#x60;, it would be represented as: &#x60;&#x60;&#x60; text_prompts[0][text]: \\\&quot;A lighthouse on a cliff\\\&quot; text_prompts[0][weight]: 0.5 &#x60;&#x60;&#x60;  To add another prompt to that request simply provide the values under a new &#x60;index&#x60;:  &#x60;&#x60;&#x60; text_prompts[0][text]: \\\&quot;A lighthouse on a cliff\\\&quot; text_prompts[0][weight]: 0.5 text_prompts[1][text]: \\\&quot;land, ground, dirt, grass\\\&quot; text_prompts[1][weight]: -0.9 &#x60;&#x60;&#x60; (required)
     * @param  string $accept The format of the response.  Leave blank for JSON, or set to &#39;image/png&#39; for a PNG image. (optional, default to 'application/json')
     * @param  string $organization Allows for requests to be scoped to an organization other than the user&#39;s default.  If not provided, the user&#39;s default organization will be used. (optional)
     * @param  \SplFileObject $mask_image Optional grayscale mask that allows for influence over which pixels are eligible for diffusion and at what strength. Must be the same dimensions as the &#x60;init_image&#x60;. Use the &#x60;mask_source&#x60; option to specify whether the white or black pixels should be inpainted. (optional)
     * @param  float $cfg_scale How strictly the diffusion process adheres to the prompt text (higher values keep your image closer to your prompt) (optional)
     * @param  \OpenAPI\Client\Model\ClipGuidancePreset $clip_guidance_preset (optional)
     * @param  int $height Height of the image in pixels.  Must be in increments of 64 and pass the following validation: - For 768 engines: &lt;span style&#x3D;&#39;display: flex; justify-content: flex-start; gap:8px&#39;&gt;589,824 &lt;span&gt;≤&lt;/span&gt; &#x60;height * width&#x60; &lt;span&gt;≤&lt;/span&gt; 1,048,576&lt;/span&gt; - All other engines: &lt;span style&#x3D;&#39;display: flex; justify-content: flex-start; gap:8px&#39;&gt;262,144 &lt;span&gt;≤&lt;/span&gt; &#x60;height * width&#x60; &lt;span&gt;≤&lt;/span&gt; 1,048,576&lt;/span&gt; (optional)
     * @param  int $width Width of the image in pixels.  Must be in increments of 64 and pass the following validation: - For 768 engines: &lt;span style&#x3D;&#39;display: flex; justify-content: flex-start; gap:8px&#39;&gt;589,824 &lt;span&gt;≤&lt;/span&gt; &#x60;height * width&#x60; &lt;span&gt;≤&lt;/span&gt; 1,048,576&lt;/span&gt; - All other engines: &lt;span style&#x3D;&#39;display: flex; justify-content: flex-start; gap:8px&#39;&gt;262,144 &lt;span&gt;≤&lt;/span&gt; &#x60;height * width&#x60; &lt;span&gt;≤&lt;/span&gt; 1,048,576&lt;/span&gt; (optional)
     * @param  \OpenAPI\Client\Model\Sampler $sampler (optional)
     * @param  int $samples Number of images to generate (optional)
     * @param  int $seed Random noise seed (omit this option or use &#x60;0&#x60; for a random seed) (optional)
     * @param  int $steps Number of diffusion steps to run (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['masking'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Image[]|\OpenAPI\Client\Model\Error|\OpenAPI\Client\Model\Error|\OpenAPI\Client\Model\Error|\OpenAPI\Client\Model\Error|\OpenAPI\Client\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function maskingWithHttpInfo($engine_id, $init_image, $mask_source, $text_prompts, $accept = 'application/json', $organization = null, $mask_image = null, $cfg_scale = null, $clip_guidance_preset = null, $height = null, $width = null, $sampler = null, $samples = null, $seed = null, $steps = null, string $contentType = self::contentTypes['masking'][0])
    {
        $request = $this->maskingRequest($engine_id, $init_image, $mask_source, $text_prompts, $accept, $organization, $mask_image, $cfg_scale, $clip_guidance_preset, $height, $width, $sampler, $samples, $seed, $steps, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\Image[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Image[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Image[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\Image[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Image[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation maskingAsync
     *
     * image-to-image/masking
     *
     * @param  string $engine_id (required)
     * @param  \SplFileObject $init_image Image used to initialize the diffusion process, in lieu of random noise. (required)
     * @param  string $mask_source For any given pixel, the mask determines the strength of generation on a linear scale.  This parameter determines where to source the mask from: - &#x60;MASK_IMAGE_WHITE&#x60; will use the white pixels of the mask_image as the mask, where white pixels are completely replaced and black pixels are unchanged - &#x60;MASK_IMAGE_BLACK&#x60; will use the black pixels of the mask_image as the mask, where black pixels are completely replaced and white pixels are unchanged - &#x60;INIT_IMAGE_ALPHA&#x60; will use the alpha channel of the init_image as the mask, where fully transparent pixels are completely replaced and fully opaque pixels are unchanged (required)
     * @param  \OpenAPI\Client\Model\TextPrompt[] $text_prompts An array of text prompts to use for generation.  Due to how arrays are represented in &#x60;multipart/form-data&#x60; requests, prompts must adhear to the format &#x60;text_prompts[index][text|weight]&#x60;, where &#x60;index&#x60; is some integer used to tie the text and weight together.  While &#x60;index&#x60; does not have to be sequential, duplicate entries  will override previous entries, so it is recommended to use sequential indices.  Given a text prompt with the text &#x60;A lighthouse on a cliff&#x60; and a weight of &#x60;0.5&#x60;, it would be represented as: &#x60;&#x60;&#x60; text_prompts[0][text]: \\\&quot;A lighthouse on a cliff\\\&quot; text_prompts[0][weight]: 0.5 &#x60;&#x60;&#x60;  To add another prompt to that request simply provide the values under a new &#x60;index&#x60;:  &#x60;&#x60;&#x60; text_prompts[0][text]: \\\&quot;A lighthouse on a cliff\\\&quot; text_prompts[0][weight]: 0.5 text_prompts[1][text]: \\\&quot;land, ground, dirt, grass\\\&quot; text_prompts[1][weight]: -0.9 &#x60;&#x60;&#x60; (required)
     * @param  string $accept The format of the response.  Leave blank for JSON, or set to &#39;image/png&#39; for a PNG image. (optional, default to 'application/json')
     * @param  string $organization Allows for requests to be scoped to an organization other than the user&#39;s default.  If not provided, the user&#39;s default organization will be used. (optional)
     * @param  \SplFileObject $mask_image Optional grayscale mask that allows for influence over which pixels are eligible for diffusion and at what strength. Must be the same dimensions as the &#x60;init_image&#x60;. Use the &#x60;mask_source&#x60; option to specify whether the white or black pixels should be inpainted. (optional)
     * @param  float $cfg_scale How strictly the diffusion process adheres to the prompt text (higher values keep your image closer to your prompt) (optional)
     * @param  \OpenAPI\Client\Model\ClipGuidancePreset $clip_guidance_preset (optional)
     * @param  int $height Height of the image in pixels.  Must be in increments of 64 and pass the following validation: - For 768 engines: &lt;span style&#x3D;&#39;display: flex; justify-content: flex-start; gap:8px&#39;&gt;589,824 &lt;span&gt;≤&lt;/span&gt; &#x60;height * width&#x60; &lt;span&gt;≤&lt;/span&gt; 1,048,576&lt;/span&gt; - All other engines: &lt;span style&#x3D;&#39;display: flex; justify-content: flex-start; gap:8px&#39;&gt;262,144 &lt;span&gt;≤&lt;/span&gt; &#x60;height * width&#x60; &lt;span&gt;≤&lt;/span&gt; 1,048,576&lt;/span&gt; (optional)
     * @param  int $width Width of the image in pixels.  Must be in increments of 64 and pass the following validation: - For 768 engines: &lt;span style&#x3D;&#39;display: flex; justify-content: flex-start; gap:8px&#39;&gt;589,824 &lt;span&gt;≤&lt;/span&gt; &#x60;height * width&#x60; &lt;span&gt;≤&lt;/span&gt; 1,048,576&lt;/span&gt; - All other engines: &lt;span style&#x3D;&#39;display: flex; justify-content: flex-start; gap:8px&#39;&gt;262,144 &lt;span&gt;≤&lt;/span&gt; &#x60;height * width&#x60; &lt;span&gt;≤&lt;/span&gt; 1,048,576&lt;/span&gt; (optional)
     * @param  \OpenAPI\Client\Model\Sampler $sampler (optional)
     * @param  int $samples Number of images to generate (optional)
     * @param  int $seed Random noise seed (omit this option or use &#x60;0&#x60; for a random seed) (optional)
     * @param  int $steps Number of diffusion steps to run (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['masking'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function maskingAsync($engine_id, $init_image, $mask_source, $text_prompts, $accept = 'application/json', $organization = null, $mask_image = null, $cfg_scale = null, $clip_guidance_preset = null, $height = null, $width = null, $sampler = null, $samples = null, $seed = null, $steps = null, string $contentType = self::contentTypes['masking'][0])
    {
        return $this->maskingAsyncWithHttpInfo($engine_id, $init_image, $mask_source, $text_prompts, $accept, $organization, $mask_image, $cfg_scale, $clip_guidance_preset, $height, $width, $sampler, $samples, $seed, $steps, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation maskingAsyncWithHttpInfo
     *
     * image-to-image/masking
     *
     * @param  string $engine_id (required)
     * @param  \SplFileObject $init_image Image used to initialize the diffusion process, in lieu of random noise. (required)
     * @param  string $mask_source For any given pixel, the mask determines the strength of generation on a linear scale.  This parameter determines where to source the mask from: - &#x60;MASK_IMAGE_WHITE&#x60; will use the white pixels of the mask_image as the mask, where white pixels are completely replaced and black pixels are unchanged - &#x60;MASK_IMAGE_BLACK&#x60; will use the black pixels of the mask_image as the mask, where black pixels are completely replaced and white pixels are unchanged - &#x60;INIT_IMAGE_ALPHA&#x60; will use the alpha channel of the init_image as the mask, where fully transparent pixels are completely replaced and fully opaque pixels are unchanged (required)
     * @param  \OpenAPI\Client\Model\TextPrompt[] $text_prompts An array of text prompts to use for generation.  Due to how arrays are represented in &#x60;multipart/form-data&#x60; requests, prompts must adhear to the format &#x60;text_prompts[index][text|weight]&#x60;, where &#x60;index&#x60; is some integer used to tie the text and weight together.  While &#x60;index&#x60; does not have to be sequential, duplicate entries  will override previous entries, so it is recommended to use sequential indices.  Given a text prompt with the text &#x60;A lighthouse on a cliff&#x60; and a weight of &#x60;0.5&#x60;, it would be represented as: &#x60;&#x60;&#x60; text_prompts[0][text]: \\\&quot;A lighthouse on a cliff\\\&quot; text_prompts[0][weight]: 0.5 &#x60;&#x60;&#x60;  To add another prompt to that request simply provide the values under a new &#x60;index&#x60;:  &#x60;&#x60;&#x60; text_prompts[0][text]: \\\&quot;A lighthouse on a cliff\\\&quot; text_prompts[0][weight]: 0.5 text_prompts[1][text]: \\\&quot;land, ground, dirt, grass\\\&quot; text_prompts[1][weight]: -0.9 &#x60;&#x60;&#x60; (required)
     * @param  string $accept The format of the response.  Leave blank for JSON, or set to &#39;image/png&#39; for a PNG image. (optional, default to 'application/json')
     * @param  string $organization Allows for requests to be scoped to an organization other than the user&#39;s default.  If not provided, the user&#39;s default organization will be used. (optional)
     * @param  \SplFileObject $mask_image Optional grayscale mask that allows for influence over which pixels are eligible for diffusion and at what strength. Must be the same dimensions as the &#x60;init_image&#x60;. Use the &#x60;mask_source&#x60; option to specify whether the white or black pixels should be inpainted. (optional)
     * @param  float $cfg_scale How strictly the diffusion process adheres to the prompt text (higher values keep your image closer to your prompt) (optional)
     * @param  \OpenAPI\Client\Model\ClipGuidancePreset $clip_guidance_preset (optional)
     * @param  int $height Height of the image in pixels.  Must be in increments of 64 and pass the following validation: - For 768 engines: &lt;span style&#x3D;&#39;display: flex; justify-content: flex-start; gap:8px&#39;&gt;589,824 &lt;span&gt;≤&lt;/span&gt; &#x60;height * width&#x60; &lt;span&gt;≤&lt;/span&gt; 1,048,576&lt;/span&gt; - All other engines: &lt;span style&#x3D;&#39;display: flex; justify-content: flex-start; gap:8px&#39;&gt;262,144 &lt;span&gt;≤&lt;/span&gt; &#x60;height * width&#x60; &lt;span&gt;≤&lt;/span&gt; 1,048,576&lt;/span&gt; (optional)
     * @param  int $width Width of the image in pixels.  Must be in increments of 64 and pass the following validation: - For 768 engines: &lt;span style&#x3D;&#39;display: flex; justify-content: flex-start; gap:8px&#39;&gt;589,824 &lt;span&gt;≤&lt;/span&gt; &#x60;height * width&#x60; &lt;span&gt;≤&lt;/span&gt; 1,048,576&lt;/span&gt; - All other engines: &lt;span style&#x3D;&#39;display: flex; justify-content: flex-start; gap:8px&#39;&gt;262,144 &lt;span&gt;≤&lt;/span&gt; &#x60;height * width&#x60; &lt;span&gt;≤&lt;/span&gt; 1,048,576&lt;/span&gt; (optional)
     * @param  \OpenAPI\Client\Model\Sampler $sampler (optional)
     * @param  int $samples Number of images to generate (optional)
     * @param  int $seed Random noise seed (omit this option or use &#x60;0&#x60; for a random seed) (optional)
     * @param  int $steps Number of diffusion steps to run (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['masking'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function maskingAsyncWithHttpInfo($engine_id, $init_image, $mask_source, $text_prompts, $accept = 'application/json', $organization = null, $mask_image = null, $cfg_scale = null, $clip_guidance_preset = null, $height = null, $width = null, $sampler = null, $samples = null, $seed = null, $steps = null, string $contentType = self::contentTypes['masking'][0])
    {
        $returnType = '\OpenAPI\Client\Model\Image[]';
        $request = $this->maskingRequest($engine_id, $init_image, $mask_source, $text_prompts, $accept, $organization, $mask_image, $cfg_scale, $clip_guidance_preset, $height, $width, $sampler, $samples, $seed, $steps, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'masking'
     *
     * @param  string $engine_id (required)
     * @param  \SplFileObject $init_image Image used to initialize the diffusion process, in lieu of random noise. (required)
     * @param  string $mask_source For any given pixel, the mask determines the strength of generation on a linear scale.  This parameter determines where to source the mask from: - &#x60;MASK_IMAGE_WHITE&#x60; will use the white pixels of the mask_image as the mask, where white pixels are completely replaced and black pixels are unchanged - &#x60;MASK_IMAGE_BLACK&#x60; will use the black pixels of the mask_image as the mask, where black pixels are completely replaced and white pixels are unchanged - &#x60;INIT_IMAGE_ALPHA&#x60; will use the alpha channel of the init_image as the mask, where fully transparent pixels are completely replaced and fully opaque pixels are unchanged (required)
     * @param  \OpenAPI\Client\Model\TextPrompt[] $text_prompts An array of text prompts to use for generation.  Due to how arrays are represented in &#x60;multipart/form-data&#x60; requests, prompts must adhear to the format &#x60;text_prompts[index][text|weight]&#x60;, where &#x60;index&#x60; is some integer used to tie the text and weight together.  While &#x60;index&#x60; does not have to be sequential, duplicate entries  will override previous entries, so it is recommended to use sequential indices.  Given a text prompt with the text &#x60;A lighthouse on a cliff&#x60; and a weight of &#x60;0.5&#x60;, it would be represented as: &#x60;&#x60;&#x60; text_prompts[0][text]: \\\&quot;A lighthouse on a cliff\\\&quot; text_prompts[0][weight]: 0.5 &#x60;&#x60;&#x60;  To add another prompt to that request simply provide the values under a new &#x60;index&#x60;:  &#x60;&#x60;&#x60; text_prompts[0][text]: \\\&quot;A lighthouse on a cliff\\\&quot; text_prompts[0][weight]: 0.5 text_prompts[1][text]: \\\&quot;land, ground, dirt, grass\\\&quot; text_prompts[1][weight]: -0.9 &#x60;&#x60;&#x60; (required)
     * @param  string $accept The format of the response.  Leave blank for JSON, or set to &#39;image/png&#39; for a PNG image. (optional, default to 'application/json')
     * @param  string $organization Allows for requests to be scoped to an organization other than the user&#39;s default.  If not provided, the user&#39;s default organization will be used. (optional)
     * @param  \SplFileObject $mask_image Optional grayscale mask that allows for influence over which pixels are eligible for diffusion and at what strength. Must be the same dimensions as the &#x60;init_image&#x60;. Use the &#x60;mask_source&#x60; option to specify whether the white or black pixels should be inpainted. (optional)
     * @param  float $cfg_scale How strictly the diffusion process adheres to the prompt text (higher values keep your image closer to your prompt) (optional)
     * @param  \OpenAPI\Client\Model\ClipGuidancePreset $clip_guidance_preset (optional)
     * @param  int $height Height of the image in pixels.  Must be in increments of 64 and pass the following validation: - For 768 engines: &lt;span style&#x3D;&#39;display: flex; justify-content: flex-start; gap:8px&#39;&gt;589,824 &lt;span&gt;≤&lt;/span&gt; &#x60;height * width&#x60; &lt;span&gt;≤&lt;/span&gt; 1,048,576&lt;/span&gt; - All other engines: &lt;span style&#x3D;&#39;display: flex; justify-content: flex-start; gap:8px&#39;&gt;262,144 &lt;span&gt;≤&lt;/span&gt; &#x60;height * width&#x60; &lt;span&gt;≤&lt;/span&gt; 1,048,576&lt;/span&gt; (optional)
     * @param  int $width Width of the image in pixels.  Must be in increments of 64 and pass the following validation: - For 768 engines: &lt;span style&#x3D;&#39;display: flex; justify-content: flex-start; gap:8px&#39;&gt;589,824 &lt;span&gt;≤&lt;/span&gt; &#x60;height * width&#x60; &lt;span&gt;≤&lt;/span&gt; 1,048,576&lt;/span&gt; - All other engines: &lt;span style&#x3D;&#39;display: flex; justify-content: flex-start; gap:8px&#39;&gt;262,144 &lt;span&gt;≤&lt;/span&gt; &#x60;height * width&#x60; &lt;span&gt;≤&lt;/span&gt; 1,048,576&lt;/span&gt; (optional)
     * @param  \OpenAPI\Client\Model\Sampler $sampler (optional)
     * @param  int $samples Number of images to generate (optional)
     * @param  int $seed Random noise seed (omit this option or use &#x60;0&#x60; for a random seed) (optional)
     * @param  int $steps Number of diffusion steps to run (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['masking'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function maskingRequest($engine_id, $init_image, $mask_source, $text_prompts, $accept = 'application/json', $organization = null, $mask_image = null, $cfg_scale = null, $clip_guidance_preset = null, $height = null, $width = null, $sampler = null, $samples = null, $seed = null, $steps = null, string $contentType = self::contentTypes['masking'][0])
    {

        // verify the required parameter 'engine_id' is set
        if ($engine_id === null || (is_array($engine_id) && count($engine_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $engine_id when calling masking'
            );
        }

        // verify the required parameter 'init_image' is set
        if ($init_image === null || (is_array($init_image) && count($init_image) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $init_image when calling masking'
            );
        }

        // verify the required parameter 'mask_source' is set
        if ($mask_source === null || (is_array($mask_source) && count($mask_source) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mask_source when calling masking'
            );
        }

        // verify the required parameter 'text_prompts' is set
        if ($text_prompts === null || (is_array($text_prompts) && count($text_prompts) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $text_prompts when calling masking'
            );
        }
        if (count($text_prompts) < 1) {
            throw new \InvalidArgumentException('invalid value for "$text_prompts" when calling V1betaGenerationApi.masking, number of items must be greater than or equal to 1.');
        }
        



        if ($cfg_scale !== null && $cfg_scale > 35) {
            throw new \InvalidArgumentException('invalid value for "$cfg_scale" when calling V1betaGenerationApi.masking, must be smaller than or equal to 35.');
        }
        if ($cfg_scale !== null && $cfg_scale < 0) {
            throw new \InvalidArgumentException('invalid value for "$cfg_scale" when calling V1betaGenerationApi.masking, must be bigger than or equal to 0.');
        }
        

        if ($height !== null && $height < 128) {
            throw new \InvalidArgumentException('invalid value for "$height" when calling V1betaGenerationApi.masking, must be bigger than or equal to 128.');
        }
        
        if ($width !== null && $width < 128) {
            throw new \InvalidArgumentException('invalid value for "$width" when calling V1betaGenerationApi.masking, must be bigger than or equal to 128.');
        }
        

        if ($samples !== null && $samples > 10) {
            throw new \InvalidArgumentException('invalid value for "$samples" when calling V1betaGenerationApi.masking, must be smaller than or equal to 10.');
        }
        if ($samples !== null && $samples < 1) {
            throw new \InvalidArgumentException('invalid value for "$samples" when calling V1betaGenerationApi.masking, must be bigger than or equal to 1.');
        }
        
        if ($seed !== null && $seed > 4294967295) {
            throw new \InvalidArgumentException('invalid value for "$seed" when calling V1betaGenerationApi.masking, must be smaller than or equal to 4294967295.');
        }
        if ($seed !== null && $seed < 0) {
            throw new \InvalidArgumentException('invalid value for "$seed" when calling V1betaGenerationApi.masking, must be bigger than or equal to 0.');
        }
        
        if ($steps !== null && $steps > 150) {
            throw new \InvalidArgumentException('invalid value for "$steps" when calling V1betaGenerationApi.masking, must be smaller than or equal to 150.');
        }
        if ($steps !== null && $steps < 10) {
            throw new \InvalidArgumentException('invalid value for "$steps" when calling V1betaGenerationApi.masking, must be bigger than or equal to 10.');
        }
        

        $resourcePath = '/v1beta/generation/{engine_id}/image-to-image/masking';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($organization !== null) {
            $headerParams['Organization'] = ObjectSerializer::toHeaderValue($organization);
        }

        // path params
        if ($engine_id !== null) {
            $resourcePath = str_replace(
                '{' . 'engine_id' . '}',
                ObjectSerializer::toPathValue($engine_id),
                $resourcePath
            );
        }

        // form params
        if ($init_image !== null) {
            $multipart = true;
            $formParams['init_image'] = [];
            $paramFiles = is_array($init_image) ? $init_image : [$init_image];
            foreach ($paramFiles as $paramFile) {
                $formParams['init_image'][] = \GuzzleHttp\Psr7\Utils::tryFopen(
                    ObjectSerializer::toFormValue($paramFile),
                    'rb'
                );
            }
        }
        // form params
        if ($mask_source !== null) {
            $formParams['mask_source'] = ObjectSerializer::toFormValue($mask_source);
        }
        // form params
        if ($mask_image !== null) {
            $multipart = true;
            $formParams['mask_image'] = [];
            $paramFiles = is_array($mask_image) ? $mask_image : [$mask_image];
            foreach ($paramFiles as $paramFile) {
                $formParams['mask_image'][] = \GuzzleHttp\Psr7\Utils::tryFopen(
                    ObjectSerializer::toFormValue($paramFile),
                    'rb'
                );
            }
        }
        // form params
        if ($text_prompts !== null) {
            $formParams['text_prompts'] = ObjectSerializer::toFormValue($text_prompts);
        }
        // form params
        if ($cfg_scale !== null) {
            $formParams['cfg_scale'] = ObjectSerializer::toFormValue($cfg_scale);
        }
        // form params
        if ($clip_guidance_preset !== null) {
            $formParams['clip_guidance_preset'] = ObjectSerializer::toFormValue($clip_guidance_preset);
        }
        // form params
        if ($height !== null) {
            $formParams['height'] = ObjectSerializer::toFormValue($height);
        }
        // form params
        if ($width !== null) {
            $formParams['width'] = ObjectSerializer::toFormValue($width);
        }
        // form params
        if ($sampler !== null) {
            $formParams['sampler'] = ObjectSerializer::toFormValue($sampler);
        }
        // form params
        if ($samples !== null) {
            $formParams['samples'] = ObjectSerializer::toFormValue($samples);
        }
        // form params
        if ($seed !== null) {
            $formParams['seed'] = ObjectSerializer::toFormValue($seed);
        }
        // form params
        if ($steps !== null) {
            $formParams['steps'] = ObjectSerializer::toFormValue($steps);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'image/png', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation textToImage
     *
     * text-to-image
     *
     * @param  string $engine_id engine_id (required)
     * @param  \OpenAPI\Client\Model\TextToImageRequestBody $text_to_image_request_body text_to_image_request_body (required)
     * @param  string $accept The format of the response.  Leave blank for JSON, or set to &#39;image/png&#39; for a PNG image. (optional, default to 'application/json')
     * @param  string $organization Allows for requests to be scoped to an organization other than the user&#39;s default.  If not provided, the user&#39;s default organization will be used. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['textToImage'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Image[]|\OpenAPI\Client\Model\Error|\OpenAPI\Client\Model\Error|\OpenAPI\Client\Model\Error|\OpenAPI\Client\Model\Error|\OpenAPI\Client\Model\Error
     */
    public function textToImage($engine_id, $text_to_image_request_body, $accept = 'application/json', $organization = null, string $contentType = self::contentTypes['textToImage'][0])
    {
        list($response) = $this->textToImageWithHttpInfo($engine_id, $text_to_image_request_body, $accept, $organization, $contentType);
        return $response;
    }

    /**
     * Operation textToImageWithHttpInfo
     *
     * text-to-image
     *
     * @param  string $engine_id (required)
     * @param  \OpenAPI\Client\Model\TextToImageRequestBody $text_to_image_request_body (required)
     * @param  string $accept The format of the response.  Leave blank for JSON, or set to &#39;image/png&#39; for a PNG image. (optional, default to 'application/json')
     * @param  string $organization Allows for requests to be scoped to an organization other than the user&#39;s default.  If not provided, the user&#39;s default organization will be used. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['textToImage'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Image[]|\OpenAPI\Client\Model\Error|\OpenAPI\Client\Model\Error|\OpenAPI\Client\Model\Error|\OpenAPI\Client\Model\Error|\OpenAPI\Client\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function textToImageWithHttpInfo($engine_id, $text_to_image_request_body, $accept = 'application/json', $organization = null, string $contentType = self::contentTypes['textToImage'][0])
    {
        $request = $this->textToImageRequest($engine_id, $text_to_image_request_body, $accept, $organization, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\Image[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Image[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Image[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\Image[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Image[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation textToImageAsync
     *
     * text-to-image
     *
     * @param  string $engine_id (required)
     * @param  \OpenAPI\Client\Model\TextToImageRequestBody $text_to_image_request_body (required)
     * @param  string $accept The format of the response.  Leave blank for JSON, or set to &#39;image/png&#39; for a PNG image. (optional, default to 'application/json')
     * @param  string $organization Allows for requests to be scoped to an organization other than the user&#39;s default.  If not provided, the user&#39;s default organization will be used. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['textToImage'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function textToImageAsync($engine_id, $text_to_image_request_body, $accept = 'application/json', $organization = null, string $contentType = self::contentTypes['textToImage'][0])
    {
        return $this->textToImageAsyncWithHttpInfo($engine_id, $text_to_image_request_body, $accept, $organization, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation textToImageAsyncWithHttpInfo
     *
     * text-to-image
     *
     * @param  string $engine_id (required)
     * @param  \OpenAPI\Client\Model\TextToImageRequestBody $text_to_image_request_body (required)
     * @param  string $accept The format of the response.  Leave blank for JSON, or set to &#39;image/png&#39; for a PNG image. (optional, default to 'application/json')
     * @param  string $organization Allows for requests to be scoped to an organization other than the user&#39;s default.  If not provided, the user&#39;s default organization will be used. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['textToImage'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function textToImageAsyncWithHttpInfo($engine_id, $text_to_image_request_body, $accept = 'application/json', $organization = null, string $contentType = self::contentTypes['textToImage'][0])
    {
        $returnType = '\OpenAPI\Client\Model\Image[]';
        $request = $this->textToImageRequest($engine_id, $text_to_image_request_body, $accept, $organization, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'textToImage'
     *
     * @param  string $engine_id (required)
     * @param  \OpenAPI\Client\Model\TextToImageRequestBody $text_to_image_request_body (required)
     * @param  string $accept The format of the response.  Leave blank for JSON, or set to &#39;image/png&#39; for a PNG image. (optional, default to 'application/json')
     * @param  string $organization Allows for requests to be scoped to an organization other than the user&#39;s default.  If not provided, the user&#39;s default organization will be used. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['textToImage'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function textToImageRequest($engine_id, $text_to_image_request_body, $accept = 'application/json', $organization = null, string $contentType = self::contentTypes['textToImage'][0])
    {

        // verify the required parameter 'engine_id' is set
        if ($engine_id === null || (is_array($engine_id) && count($engine_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $engine_id when calling textToImage'
            );
        }

        // verify the required parameter 'text_to_image_request_body' is set
        if ($text_to_image_request_body === null || (is_array($text_to_image_request_body) && count($text_to_image_request_body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $text_to_image_request_body when calling textToImage'
            );
        }




        $resourcePath = '/v1beta/generation/{engine_id}/text-to-image';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($organization !== null) {
            $headerParams['Organization'] = ObjectSerializer::toHeaderValue($organization);
        }

        // path params
        if ($engine_id !== null) {
            $resourcePath = str_replace(
                '{' . 'engine_id' . '}',
                ObjectSerializer::toPathValue($engine_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'image/png', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($text_to_image_request_body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($text_to_image_request_body));
            } else {
                $httpBody = $text_to_image_request_body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
